plugins {
  id "com.github.johnrengelman.shadow" version "7.1.0"
}

architectury {
  platformSetupLoomIde()
  forge()
}

loom {
  forge {
    mixinConfig "mca.mixin.json"
  }
}

configurations {
  common
  shadowCommon
  compileClasspath.extendsFrom common
  runtimeClasspath.extendsFrom common
  developmentForge.extendsFrom common
}

dependencies {
  forge "net.minecraftforge:forge:${rootProject.minecraft_version}-${rootProject.forge_version}"
  // Remove the next line if you don't want to depend on the API
  modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"

  common(project(path: ":common", configuration: "namedElements")) {
    transitive false
  }
  shadowCommon(project(path: ":common", configuration: "transformProductionForge")) {
    transitive false
  }
}

processResources {
  inputs.property "version", project.version.toString()

  filesMatching("META-INF/mods.toml") {
    expand "version": project.version.toString()
  }
}

shadowJar {
  exclude "fabric.mod.json"
  configurations = [project.configurations.shadowCommon]
  classifier "dev-shadow"
}

remapJar {
  input.set shadowJar.archiveFile
  dependsOn shadowJar
  classifier "forge"
}

jar {
  classifier "dev"
}

sourcesJar {
  duplicatesStrategy 'exclude'
  def commonSources = project(":common").sourcesJar
  dependsOn commonSources
  from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}