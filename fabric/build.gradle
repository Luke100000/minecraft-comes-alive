plugins {
  id "com.github.johnrengelman.shadow" version "7.1.0"
}

architectury {
  platformSetupLoomIde()
  fabric()
}

loom {
  mixin.defaultRefmapName = 'mca.mixin.refmap.json'
}

configurations {
  common
  shadowCommon
  compileClasspath.extendsFrom common
  runtimeClasspath.extendsFrom common
  developmentFabric.extendsFrom common
}

dependencies {
  modImplementation "net.fabricmc:fabric-loader:${rootProject.loader_version}"
  modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_version}"
  // Remove the next line if you don't want to depend on the API
  modApi "dev.architectury:architectury-fabric:${rootProject.architectury_version}"

  common(project(path: ":common", configuration: "namedElements")) {
    transitive false
  }
  shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) {
    transitive false
  }
}

processResources {
  inputs.property "version", project.version.toString()

  filesMatching("fabric.mod.json") {
    expand "version": project.version.toString()
  }

  from 'LICENSE'
}

shadowJar {
  configurations = [project.configurations.shadowCommon]
  classifier "dev-shadow"
}

remapJar {
  input.set shadowJar.archiveFile
  dependsOn shadowJar
  classifier "fabric"
}

jar {
  classifier "dev"
}

sourcesJar {
  duplicatesStrategy 'exclude'
  def commonSources = project(":common").sourcesJar
  dependsOn commonSources
  from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
  withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
    skip()
  }
}